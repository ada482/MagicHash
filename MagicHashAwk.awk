function magichash( mhinput ) {

	temphash= "";

#Pipes the string into md5 converter
	tmp="echo " mhinput " | openssl md5 | cut -f2 -d\" \""
	tmp | getline temphash
	close(tmp)
#prepend hex prefix
	temphash = "0x" temphash;
	return temphash;

}



BEGIN{
	st[0]="NULL/NOT FOUND";
	hash[0]=0x0;
	magicnumbercount=0;
	fileInclude=0;
	currentFile="";
}

/MAGICHASH\(\)/{
	if(currentFile != FILENAME)
	{
		fileInclude=0;
		currentFile=FILENAME;
	}
	if(fileInclude==1)
	{
		st[magicnumbercount]=("Filename: " FILENAME "  Line: " NR);
		hash[magicnumbercount]=magichash( st[magicnumbercount] );
		gsub(/MAGICHASH\(\)/,hash[magicnumbercount]);
		magicnumbercount++ ;
	}
}

/\#include \"MagicHash.h\"/{
	if(currentFile!= FILENAME)
	{
		currentFile=FILENAME;
	}
	fileInclude= 1;
}

{
	print;
}

END{
	print "//THIS WAS AUTOMATICALLY GENERATED BY MagicHashAwk.awk" > "MagicHashAwk.h";
	print "//Only include this file if you are using the multiton container in MagicHash.h" >> "MagicHashAwk.h";
	print "//Implant the function defined here into the start of your main function\n\n" >> "MagicHashAwk.h";
	print "#include \"MagicHash.h\"\n\n" >> "MagicHashAwk.h";
	print "void MagicHashInitial(){" >> "MagicHashAwk.h";
	for(i =0; i < magicnumbercount; i++)
	{
		print "\tMagicHashTableMultiton.add(\"" st[i] "\"," hash[i] ");" >> "MagicHashAwk.h";
	}
	print "};" >> "MagicHashAwk.h";
	
}